{"version":3,"sources":["Components/FirstPage.js","Components/SecondPage.js","Components/APIs/Dogs.js","Components/APIs/DogsFrame.js","Components/APIs/Cats.js","Components/APIs/CatsFrame.js","Components/APIs/APITemplate.js","Components/APIPage.js","App.js","serviceWorker.js","index.js"],"names":["FirstPage","SecondPage","DogsAPI","useState","error","setError","isLoaded","setIsLoaded","data","setdata","useEffect","fetch","then","res","json","result","message","DogsFrame","Dogs","CatsAPI","Note","styled","p","APITemplate","props","state","this","url","setState","console","log","key","title","style","backgroundColor","margin","Object","entries","map","arr","color","JSON","stringify","React","Component","Frame","div","APIPage","SLink","Link","App","className","display","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"iSAWeA,MATf,WACE,OACE,6BACE,4HACA,6DCISC,MARf,WACE,OACE,6BACE,iD,OCwCSC,MA3Cf,WAAoB,IAAD,EAESC,mBAAS,MAFlB,mBAEVC,EAFU,KAEHC,EAFG,OAGeF,oBAAS,GAHxB,mBAGVG,EAHU,KAGAC,EAHA,OAIOJ,mBAAS,IAJhB,mBAIVK,EAJU,KAIJC,EAJI,KAqBjB,OAfAC,qBAAU,WACRC,MAAM,2CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCR,GAAY,GACZE,EAAQM,EAAOC,YAEjB,SAACZ,GACCG,GAAY,GACZF,EAASD,QAGd,IAECA,EACK,uCAAaA,EAAMY,SAChBV,EAIR,oCACE,6BAAME,IAJH,4CCdIS,EATG,WAChB,OACE,6BACE,oDACA,kBAACC,EAAD,Q,gCCmDSC,I,qICtDR,IAAMC,EAAOC,IAAOC,EAAV,KC2EFC,E,kDA1Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXrB,MAAO,KACPE,UAAU,EACVE,KAAM,IANS,E,gEAYE,IAAD,OAElBG,MAAMe,KAAKF,MAAMG,KACdf,MAAK,SAAAC,GAGJ,OAAOA,EAAIC,UAEZF,MACC,SAACG,GAGC,EAAKa,SAAS,CACZtB,UAAU,EACVE,KAAMO,OAMV,SAACX,GAEC,EAAKwB,SAAS,CACZtB,UAAU,EACVF,UAEEA,GAAOyB,QAAQC,IAAI,yBAA0B1B,Q,6BAMlDoB,GAAQ,IACLhB,EAASkB,KAAKD,MAAdjB,KAQJuB,EAAM,EACV,OACE,6BACE,4BAAKL,KAAKF,MAAMQ,OAChB,kBAACZ,EAAD,4BAA2BM,KAAKF,MAAMG,IAAtC,KAMA,yBAAKM,MAAO,CAAEC,gBAAiB,MAAOC,OAAQ,SAC5C,gDACiB,iBAAR3B,EAAoB4B,OAAOC,QAAQ7B,GAAM8B,KAAI,SAAAC,GAAgB,OAAPR,IAAc,yBAAKA,IAAKA,GAAV,IAAgB,0BAAME,MAAO,CAAEO,MAAO,SAAtB,IAAkCD,EAAI,GAAtC,KAAhB,MAAqEE,KAAKC,UAAUH,EAAI,QAAiB,2BAAI/B,S,GAlE1KmC,IAAMC,W,iKCShC,IAAMC,EAAQxB,IAAOyB,IAAV,KA6BIC,MAnBf,WAEE,OACE,oCACE,iDACA,kBAACF,EAAD,KAEE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAalB,IAAI,qDAAqDK,MAAM,0CAC5E,kBAAC,EAAD,CAAaL,IAAI,0DAA0DK,MAAM,uC,0HCvBzF,IAAMgB,EAAQ3B,YAAO4B,IAAP5B,CAAH,KAiCI6B,MA3Bf,WACE,OAGE,yBAAKC,UAAU,OAGb,yBAAKlB,MAAO,CAAEmB,QAAS,SACrB,kBAACJ,EAAD,CAAOK,GAAG,KAAV,QACA,kBAACL,EAAD,CAAOK,GAAG,SAAV,WACA,kBAACL,EAAD,CAAOK,GAAG,WAAV,uBACA,kBAACL,EAAD,CAAOK,GAAG,MAAV,UACA,kBAACL,EAAD,CAAOK,GAAG,QAAV,kCAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxD,IACjC,kBAAC,IAAD,CAAOsD,OAAK,EAACC,KAAK,SAASC,UAAWvD,IACtC,kBAAC,IAAD,CAAOqD,OAAK,EAACC,KAAK,WAAWC,UAAWT,OCrB5BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdC,OAAM,SAAAnE,GACLyB,QAAQzB,MAAMA,EAAMY,c","file":"static/js/main.7504ab75.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction FirstPage() {\r\n  return (\r\n    <div>\r\n      <p> Miroslav greets the world from REACT - with hot reloading upon any change (even unsaved) XX.</p>\r\n      <h2>This is page 1 - HOME page.</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FirstPage;","import React from 'react';\r\n\r\nfunction SecondPage() {\r\n  return (\r\n    <div>\r\n      <h2>This is page 2.</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SecondPage;","import React, { useState, useEffect } from 'react';\r\n\r\nfunction DogsAPI() {\r\n\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [data, setdata] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://dog.ceo/api/breeds/image/random\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setdata(result.message);\r\n        },\r\n        (error) => {  // Note: it's important to handle errors here instead of a catch() block so that we don't swallow exceptions from actual bugs in components.\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])   // Note: the empty deps array [] means this useEffect will run once similar to componentDidMount()\r\n\r\n  if (error) {\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <>\r\n        <div>{data}</div>\r\n        {/* <ul> */}\r\n\r\n        {/* {items.map(item => (\r\n            <li key={item.name}>\r\n              {item.name} {item.price}\r\n            </li> */}\r\n        {/* ))} */}\r\n        {/* </ul> */}\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default DogsAPI;\r\n","import React from 'react';\r\nimport DogsAPI from './Dogs';\r\n\r\nconst DogsFrame = () => {\r\n  return (\r\n    <div>\r\n      <h3>Dogs API (CORS: yes)</h3>\r\n      <DogsAPI/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DogsFrame;","import React, { useState, useEffect } from 'react';\r\n\r\n\r\nfunction CatsAPI() {\r\n\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [data, setdata] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // console.log(\"use effect runing\");\r\n    fetch(\"https://cat-fact.herokuapp.com/facts\")\r\n\r\n    // fetch(\"https://dog.ceo/api/breeds/image/random\")\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          // console.log(\"we got response\");\r\n          // console.log(result);\r\n          setIsLoaded(true);\r\n          setdata(result);\r\n        },\r\n        (error) => {  // Note: it's important to handle errors here instead of a catch() block so that we don't swallow exceptions from actual bugs in components.\r\n          // console.log(\"we got error\");\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [])   // Note: the empty deps array [] means this useEffect will run once similar to componentDidMount()\r\n\r\n  // console.log(\"000\");\r\n  if (error) {\r\n    // console.log((\"1\"));\r\n    return <div>Error: {error.message}</div>;\r\n  } else if (!isLoaded) {\r\n    // console.log((\"2\"));\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    // console.log((\"3\"));\r\n    // console.log(data);\r\n\r\n    return (\r\n      <>\r\n        <div>{data}</div>\r\n        {/* <ul> */}\r\n\r\n        {/* {items.map(item => (\r\n            <li key={item.name}>\r\n              {item.name} {item.price}\r\n            </li> */}\r\n        {/* ))} */}\r\n        {/* </ul> */}\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default CatsAPI;\r\n","import React from 'react';\r\nimport CatsAPI from './Cats';\r\nimport styled from 'styled-components';\r\n\r\nexport const Note = styled.p`\r\ncolor: blue;\r\nfont-style:italic;\r\nfont-size:0.8rem;\r\n\r\n`;\r\nconst CatsFrame = () => {\r\n  return (\r\n    <div>\r\n      <h3>Cats API (CORS: no)</h3>\r\n      <Note>note</Note>\r\n      <CatsAPI />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CatsFrame;","import React from 'react';\r\nimport { Note } from './CatsFrame';\r\n// import { Redirect } from 'react-router-dom';\r\n\r\nclass APITemplate extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // console.log(\"props url in constructor:\", props.url);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      data: [],\r\n      // url: props.url,\r\n      // title:props.title\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // console.log(\"component did mount\", this.state);\r\n    fetch(this.props.url)\r\n      .then(res => {\r\n        // console.log(\"first  in fetch: \", res);\r\n        // console.log(\"first  in fetch: \", res.body);\r\n        return res.json()\r\n      })\r\n      .then(\r\n        (result) => {\r\n          // console.log(\"Result second in fetch:\", result);\r\n\r\n          this.setState({\r\n            isLoaded: true,\r\n            data: result\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n          if (error) console.log(\"Error second in fetch:\", error);\r\n\r\n        }\r\n      )\r\n  }\r\n\r\n  render(props) {\r\n    const { data } = this.state;\r\n    // console.log(\"state in render:\", this.state);\r\n    // console.log(\"props in render:\", props); //no props - undefined!!\r\n    // console.log(\" url in state in render:\", url);\r\n    // console.log(\" error in state in render:\", error);\r\n    // console.log(\"type of received data in render: \", (typeof data == 'object'));\r\n\r\n\r\n    let key = 0;\r\n    return (\r\n      <div>\r\n        <h3>{this.props.title}</h3>\r\n        <Note> getting from url: \"{this.props.url}\"</Note>\r\n        {/* <div>Error: {error}</div> */}\r\n        {/* <div>Error:</div> */}\r\n        {/* {error ? Object.keys(error).map(obj => <div>{obj}:{data[obj].name}</div>) : <p>No error</p>} */}\r\n        {/* <br /> */}\r\n        {/* <div>Is loaded: {isLoaded}</div> */}\r\n        <div style={{ backgroundColor: 'red', margin: '10px' }}>\r\n          <h5> Data received-></h5>\r\n          {(typeof data == \"object\") ? Object.entries(data).map(arr => { key++; return <div key={key}> <span style={{ color: 'blue' }}> {arr[0]} </span> : {JSON.stringify(arr[1])}</div>; }) : <p>{data}</p>}\r\n          {/* {(typeof data == \"object\") ? <div>{JSON.stringify(data)}</div> : <p> {data} </p>}  */}\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default APITemplate;","import React from 'react';\r\n// import CatsFrame from './APIs/CatsFrame';\r\nimport DogsFrame from './APIs/DogsFrame';\r\nimport APITemplate from './APIs/APITemplate';\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\n// const Block = styled(CatsAPI)`\r\n// background-color: green !important;\r\n// min-height:100px;\r\n// min-width:300px;\r\n// `;\r\nconst Frame = styled.div`\r\n>*{\r\nbackground-color: lightgreen;\r\nmin-height:100px;\r\nmin-width:300px;\r\nmargin:10px;\r\n}\r\n`;\r\n\r\n\r\nfunction APIPage() {\r\n\r\n  return (\r\n    <>\r\n      <h2>This is API page.</h2>\r\n      <Frame>\r\n        {/* <CatsFrame /> */}\r\n        <DogsFrame />\r\n        <APITemplate url='https://mern-express-heroku.herokuapp.com/api/json' title='test of simple local API from Express'/>\r\n        <APITemplate url='https://mern-express-heroku.herokuapp.com/api/json/cats' title='cats from Remote API using CORS'/>\r\n        {/* <APITemplate url='/api/send' /> */}\r\n        {/* <APITemplate url='/api/write' /> */}\r\n\r\n\r\n      </Frame>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default APIPage;","//rsc  -> f.c.\r\nimport React from 'react';\r\nimport { Link, Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport FirstPage from './Components/FirstPage'\r\nimport SecondPage from './Components/SecondPage'\r\nimport APIPage from './Components/APIPage'\r\nimport styled from 'styled-components'\r\n\r\nconst SLink = styled(Link)`\r\nmargin:10px;\r\nbackground-color:orange !important;\r\n`\r\n\r\n\r\nfunction App() {\r\n  return (\r\n\r\n\r\n    <div className=\"App\">\r\n      {/* <header className=\"App-header\">\r\n      </header> */}\r\n      <div style={{ display: 'flex' }}>\r\n        <SLink to='/'>Home</SLink>\r\n        <SLink to='page2'>Page 2.</SLink>\r\n        <SLink to='pageAPI'>Page 3 - public API</SLink>\r\n        <SLink to='/x'>x land</SLink>\r\n        <SLink to='/api'> Miro's old local Express api</SLink>\r\n      </div>\r\n\r\n      <Switch>\r\n        <Route exact path='/' component={FirstPage} />\r\n        <Route exact path='/page2' component={SecondPage} />\r\n        <Route exact path='/pageAPI' component={APIPage} />\r\n      </Switch>\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}