import React from 'react';
import PlanContext from '../ContextDefaults';

import { getSimpleDateIfTrueAlsoTime } from '../../functions/basics';

import CounterAllIn from '../../basicComponents/CounterAllIn';

const MaxRepsUsedForRepsPercentages = () => {
  const { plan, updatePlan } = React.useContext(PlanContext);

  // const [currentValueOfMaxReps, setCurrentValueOfMaxReps] = React.useState(plan.maxRepsNeeded.reps);

  const fReceivingUpdatedMaxReps = (updatedMaxValue) => {
    // setCurrentValueOfMaxReps(updatedMaxValue);
    if (plan.maxRepsNeeded.type !== 'userGenerated') {
      plan.maxRepsNeeded.reps2 = plan.maxRepsNeeded.reps;
      plan.maxRepsNeeded.type2 = plan.maxRepsNeeded.type;
    }
    plan.maxRepsNeeded.reps = updatedMaxValue;
    plan.maxRepsNeeded.type = 'userGenerated';

    //////reps are now calculated dynamically from % and max. any time % or max reps or specific reps are updated , rep are recalculated from current reps%
    // plan.trainings.forEach(training => {
    //   let sets = training.sets;
    //   sets.forEach(set => {
    //     if (set.reps) {
    //       set.reps = Math.round(set.repsAsPercentage / 100 * plan.maxRepsNeeded.reps);
    //     }
    //   })
    // })
    // console.log("plan before update:", plan);

    updatePlan({ ...plan });
  }


  return (
    <div>
      <h3>Max reps used to calculate %:</h3>
      {/* <h3 style={{display:'inline',backgroundColor:'lightGray'}}>{plan.maxRepsNeeded.reps}</h3> */}
      {/* <h3 style={{ width: '70px', textAlign: 'center', margin: 'auto', backgroundColor: 'lightGray' }}>{plan.maxRepsNeeded.reps}</h3> */}
      {/* <CounterAllIn settings={[1, 5, fReceivingUpdatedMaxReps, currentValueOfMaxReps]} /> */}
      <CounterAllIn settings={[1, 5, fReceivingUpdatedMaxReps, plan.maxRepsNeeded.reps]} />
      <div style={{ textAlign: 'center' }}>
        <span>(</span>
        {plan.maxRepsNeeded.type === 'userGenerated' ? <span>This is number generated by you.
            {plan.maxRepsNeeded.type2 === 'initialAssessment' ? <span>)<br /> (In your initial assessment from {getSimpleDateIfTrueAlsoTime(plan.maxRepsNeeded.date, false, true)} you did {plan.maxRepsNeeded.reps2} reps.</span>
            : plan.maxRepsNeeded.type2 === 'latestMaxReps' ? <span>)<br /> (Your most current Max Reps from {getSimpleDateIfTrueAlsoTime(plan.maxRepsNeeded.date, false, true)} is {plan.maxRepsNeeded.reps2} reps.</span> : null
          }</span>
          : plan.maxRepsNeeded.type === 'initialAssessment' ? <span>This is your initial assessment data of your current Plan - from {getSimpleDateIfTrueAlsoTime(plan.maxRepsNeeded.date, false, true)}.</span>
            : plan.maxRepsNeeded.type === 'latestMaxReps' ? <span>This is your most current Max Reps data - from {getSimpleDateIfTrueAlsoTime(plan.maxRepsNeeded.date, false, true)}</span>
              : plan.maxRepsNeeded.type === 'default' ? <span>This is just a random number as you didn't do any assessment yet.</span>
                : null}
        <span>)</span>
      </div>
    </div>
  );
};

export default MaxRepsUsedForRepsPercentages;